#!/usr/bin/env python3

import sys
import math

def helpUsage():
    print("USAGE")
    print("    ./308reedpipes r0 r5 r10 r15 r20 n")
    print("DESCRIPTION")
    print("    r0      radius (in cm) of pipe at the 0cm abscissa")
    print("    r5      radius (in cm) of pipe at the 5cm abscissa")
    print("    r10     radius (in cm) of pipe at the 10cm abscissa")
    print("    r15     radius (in cm) of pipe at the 15cm abscissa")
    print("    r20     radius (in cm) of pipe at the 20cm abscissa")
    print("    n       number of points needed to display the radius")

def printVector(ord):
    printingVal = []
    vector = [0.0] * 5
    vector[2] = ((6 * (ord[3] - 2 * ord[2] + ord[1]) / 50) - ((6 * (ord[2] - 2 * ord[1] + ord[0]) / 50) + (6 * (ord[4] - 2 * ord[3] + ord[2]) / 50)) / 4) * 4 / 7
    vector[1] = (6 * (ord[2] - 2 * ord[1] + ord[0]) / 50) / 2 - 0.25 * vector[2]
    vector[3] = (6 * (ord[4] - 2 * ord[3] + ord[2]) / 50) / 2 - 0.25 * vector[2]
    for i in range(len(vector)):
        printingVal.append(round(vector[i], 1) + 0.0)
    print("vector result: ", printingVal)
    return (vector)

def reed(values):
    amount = int(values[5])
    abscissa = []
    r = [0, 5, 10, 15, 20]
    ord = values[:-1]
    rad = [0.0] * amount
    vector = printVector(ord)
    for n in range(amount):
        abscissa.append(20 / (amount - 1) * n)
        pow = int((abscissa[n] - 0.01) / 5) + 1
        tmp1 = -vector[pow - 1] / 30 * math.pow(abscissa[n] - r[pow], 3)
        tmp2 = vector[pow] / 30 * math.pow(abscissa[n] - r[pow - 1], 3)
        tmp3 = -(ord[pow - 1] / 5 - 5 / 6 * vector[pow - 1]) * (abscissa[n] - r[pow])
        tmp4 = (ord[pow] / 5 - 5 / 6 * vector[pow]) * (abscissa[n] - r[pow - 1])
        rad[n] = tmp1 + tmp2 + tmp3 + tmp4
    for n in range(amount):
        print("abscissa: %.1f cm\tradius: %.1f cm" % (abscissa[n], rad[n]))

try:
    length = len(sys.argv)
    if length == 2 and sys.argv[1] == "-h":
        helpUsage()
        exit(0)
    values = [0] * (length - 1)
    for i in range(1, length):
        try:
            float(sys.argv[i])
        except:
            raise Exception("Every arguments must be a number or a float.\n")
        if float(sys.argv[i]) <= 0:
            raise Exception("Argument is negative or 0.\n")
        values[i - 1] = float(sys.argv[i])
    if length == 7:
        reed(values)
    else:
        raise Exception("Invalid number of arguments.\n")
except Exception as error:
    sys.stdout.write(str(error))
    exit(84)